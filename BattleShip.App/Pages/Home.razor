@page "/gameIA"
@using BattleShip.Models
@using BattleShip.App.Service
@attribute [Authorize]
@inject NavigationManager Navigation
@inject GameState GameState
@inject HttpClient Http

<style>
    body{
        background-color: #E2A3AA;
    }
    .custom-button {
        padding: 4px 10px;
        background-color: #b56b77;
        color: white;
        border: none;
        cursor: pointer;
        border-radius: 4px;
        font-size: 0.8em;
        transition: background-color 0.3s, transform 0.2s ease;
        box-shadow: 0 2px 3px rgba(0, 0, 0, 0.1);
        margin-top: 8px;
        margin-left: 30px;
        margin-bottom: 0.5px;
    }
    
</style>

<h3>Bataille Navale</h3>

<button class="custom-button" @onclick="StartNewGameIA">Démarrer une nouvelle partie</button>
<button class="custom-button" @onclick="RestartGame">Redémarrer la partie</button>

@if (GameState.PlayerGrid != null)
{
    <GameIA />
}

@code {
    private string DebugMessage { get; set; } 

    private async Task StartNewGameIA()
    {

        Navigation.NavigateTo("/chooseShip/ia");

    }
    private async Task RestartGame()
    {

        var response = await Http.GetAsync($"/restart/{GameState.GameId}");
        for (int i = 0; i < 10; i++)
        {
            for (int j = 0; j < 10; j++)
            {
                Console.WriteLine("Player grid : " + GameState.PlayerGrid[i, j]);
            }
        };
        if (response.IsSuccessStatusCode)
        {
            var gameData = await response.Content.ReadFromJsonAsync<NewGameResponse>();
            GameState.GameId = gameData.GameId;
            GameState.RestartGridImage();

            char[,] playerGrid = GameState.ConvertListToCharArray(gameData.PlayerGrid);
            bool?[,] opponentGrid = GameState.ConvertListToBoolArray(gameData.OpponentGrid);
            GameState.IsPlayerTurn = true;
            GameState.InitializePlayerGrid(playerGrid);
            Console.WriteLine("Player grid : " + playerGrid);
            GameState.InitializeOpponentGrid(opponentGrid);
            GameState.RestartGridImage();
            GameState.RemoveMoveAll();
            for(int i = 0; i < 10; i++)
            {
                for(int j = 0; j < 10; j++)
                {
                    Console.WriteLine("Player grid : " + GameState.PlayerGrid[i, j]);
                }
            };

            StateHasChanged();
            GameState.RestartGame();

        }
        else
        {
            Console.WriteLine("Erreur lors de la création de la partie : " + await response.Content.ReadAsStringAsync());
        }
           
          
  
        }

    public class NewGameResponse
    {
        public string GameId { get; set; }
        public List<List<char>> PlayerGrid { get; set; }
        public List<List<bool?>> OpponentGrid { get; set; }
    }
}
