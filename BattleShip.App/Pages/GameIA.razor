@using BattleShip.App.Service
@using BattleShip.Models
@inject HttpClient Http
@inject GameState GameState
@inject NavigationManager Navigation

<style>
    .scrollable-container {
        max-height: 500px; 
        overflow-y: auto; 
        border: 1px solid #ccc; 
        padding: 10px; 
        background-color: #E2A3AA; 
    }

    body{
        background-color: #E2A3AA;
    }
    .grid-image {
        width: 100%;
        height: auto;
        max-width: 20px;
    }

    td {
        text-align: center;
        min-width: 20px;
    }

    .grid-container {
        display: flex;
        justify-content: space-around; /* Sépare uniformément les deux grilles */
        gap: 20px; /* Espace entre les grilles */
    }

    .grid {
        border-collapse: collapse; /* Pour un style de grille propre */
        background-color: white;
    }

        .grid td {
            padding: 5px;
            border: 1px solid black;
        }
</style>

<div class="grid-container">
    <!-- Grille du Joueur -->
    <div>
        <h4>Grille du Joueur</h4>
        <table class="grid">
            <!-- Ajout des numéros de colonne -->
            <tr>
                <td></td> <!-- Case vide pour l'alignement des lettres -->
                @for (int j = 0; j < GameState.PlayerGrid.GetLength(1); j++)
                {
                    <td><b>@j</b></td>
                }
            </tr>

            @for (int i = 0; i < GameState.PlayerGrid.GetLength(0); i++)
            {
                <tr>
                    <!-- Ajout des lettres sur la gauche -->
                    <td><b>@(Convert.ToChar(65 + i))</b></td> <!-- 65 représente 'A' en ASCII -->
                    @for (int j = 0; j < GameState.PlayerGrid.GetLength(1); j++)
                    {
                        <td>
                            @if (GameState.PlayerGrid[i, j] == '\0')
                            {
                                <span>.</span>
                            }
                            else if (GameState.PlayerGrid[i, j] == 'X')
                            {
                                <img src="images/hit.png" alt="Touché" class="grid-image" />
                            }
                            else if (GameState.PlayerGrid[i, j] == 'O')
                            {
                                <img src="images/miss.jpeg" alt="Raté" class="grid-image" />
                            }
                            else
                            {
                                <span>@GameState.PlayerGrid[i, j]</span>
                            }
                        </td>
                    }
                </tr>
            }
        </table>
    </div>

    <!-- Grille de l'Adversaire -->
    <div>
        <h4>Grille de l'Adversaire</h4>
        <table class="grid">
            <!-- Ajout des numéros de colonne -->
            <tr>
                <td></td> <!-- Case vide pour l'alignement des lettres -->
                @for (int j = 0; j < GameState.OpponentGrid.GetLength(1); j++)
                {
                    <td><b>@j</b></td>
                }
            </tr>

            @for (int i = 0; i < GameState.OpponentGrid.GetLength(0); i++)
            {
                <tr>
                    <!-- Ajout des lettres sur la gauche -->
                    <td><b>@(Convert.ToChar(65 + i))</b></td> <!-- 65 représente 'A' en ASCII -->
                    @for (int j = 0; j < GameState.OpponentGrid.GetLength(1); j++)
                    {
                        int capturedI = i;
                        int capturedJ = j;

                        @if (GameState.OpponentGrid[i, j] == null)
                        {
                            <td @onclick="@(() => GameState.IsPlayerTurn ? MakeAttack(capturedI, capturedJ) : null)" style="cursor: pointer;">
                                <span id="@i-@j">.</span>
                            </td>
                        }
                        else
                        {
                            <td>
                                @if (GameState.OpponentGrid[i, j] == true)
                                {
                                    <img src="images/hit.png" alt="Touché" class="grid-image" />
                                }
                                else
                                {
                                    <img src="images/miss.jpeg" alt="Raté" class="grid-image" />
                                }
                            </td>
                        }
                    }
                </tr>
            }
        </table>
    </div>
    <div>
        <button @onclick="UndoLastMove">Annuler</button>

        <div class="scrollable-container">
            <ul>
                @foreach (var move in Enumerable.Reverse(GameState.Moves))
                {
                    <li>
                        Joueur @move.AttackerName a @if (move.IsHit)
                        {
                            <b>touché</b>
                        }
                        else
                        {
                            <i>raté</i>
                        } sur (@move.LetterX, @move.Y)
                    </li>
                }
            </ul>
        </div>

    </div>
</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        await LoadHistory();  
    }
    private async Task MakeAttack(int x, int y)
    {
        Console.WriteLine   ($"Attaque en {x}, {y}");
        if (!GameState.IsPlayerTurn) return;

        if (GameState.GameId == null)
            return;

        var response = await Http.PostAsJsonAsync($"/attack/{GameState.GameId}?x={x}&y={y}", new { });

        if (!response.IsSuccessStatusCode)
        {
            return;
        }

        var result = await response.Content.ReadFromJsonAsync<AttackResponse>();

        GameState.UpdateOpponentGrid(x, y, result.PlayerHit);


        if (result.GameOver)
        {
            GameState.WinnerName = result.Winner;
            Navigation.NavigateTo("/end");
        }
        Console.WriteLine($"Vous avez touché un bateau en {result.IAX}.");
        if (result.IAHit != '.')
        {
            GameState.IsPlayerTurn = false;
            Console.WriteLine($"L'IA a touché votre bateau en {result.IAX}, {result.IAY}.");
            GameState.UpdatePlayerGrid(result.IAX, result.IAY, result.IAHit);
            GameState.IsPlayerTurn = true;
        }
        await LoadHistory();

    }
    private async Task LoadHistory()
    {
        if (!string.IsNullOrEmpty(GameState.GameId))
        {
            try
            {
                var moves = await Http.GetFromJsonAsync<List<MoveDto>>($"/history/{GameState.GameId}");

                if (moves != null && moves.Any())
                {
                    foreach (var move in moves)
                    {
                        move.LetterX = Convert.ToChar(65 + move.X).ToString(); 
                    }

                    GameState.Moves = moves.ToList();
                }
                else
                {
                    Console.WriteLine("Aucun mouvement trouvé.");
                    GameState.Moves = new List<MoveDto>();  
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erreur lors du chargement de l'historique: {ex.Message}");
            }
        }
        else
        {
            Console.WriteLine("GameId est nul ou vide.");
        }
    }
    private async Task UndoLastMove()
    {
        if (GameState.Moves.Any())
        {
            var lastMove = GameState.Moves.Last();
            var response = await Http.PostAsJsonAsync($"/undo/{GameState.GameId}", lastMove); 

            if (response.IsSuccessStatusCode)
            {
                GameState.Moves.RemoveAt(GameState.Moves.Count - 1); 

                if (lastMove.AttackerName != "ia")
                {
                    GameState.UpdateOpponentGrid(lastMove.X, lastMove.Y, null);
                }
                else
                {
                    GameState.UpdatePlayerGrid(lastMove.X, lastMove.Y, lastMove.PreviousLetter);
                }

                StateHasChanged(); 
            }
            else
            {
                Console.WriteLine("Erreur lors de l'annulation du dernier mouvement.");
            }
        }
    }
    

    public class MoveDto
    {
        public string AttackerName { get; set; }  
        public int X { get; set; }                
        public int Y { get; set; }               
        public bool IsHit { get; set; }           
        public string LetterX { get; set; }    
        public char PreviousLetter { get; set; }  
    }



        public class AttackResponse
        {
            public bool PlayerHit { get; set; }
            public char IAHit { get; set; }
            public int IAX { get; set; }
            public int IAY { get; set; }
            public bool GameOver { get; set; }
            public string Winner { get; set; }
            public int PlayerX { get; set; }
            public int PlayerY { get; set; }
            public string IaId { get; set; }
            public string PlayerId { get; set; }
        }
}
