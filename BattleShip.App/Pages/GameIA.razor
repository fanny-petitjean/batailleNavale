@using BattleShip.App.Service
@using BattleShip.Models
@inject HttpClient Http
@inject GameState GameState
@inject NavigationManager Navigation
@inject BattleshipService.BattleshipServiceClient client
@using System.Text.Json;

<style>
    body {
        background-color: #E2A3AA;
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
    }

    .grid-container {
        display: flex;
        justify-content: space-between;
        margin: 20px; 
    }

    .grid {
        display: table;
        border-collapse: collapse;
        margin-right: 20px;
    }

    .grid-cell, .header-cell {
        width: 40px;
        height: 40px;
        background-color: white;
        border: 1px solid black;
        text-align: center;
        vertical-align: middle;
        padding: 0;
        margin: 0;
    }

        .grid-cell img {
            width: 100%;
            height: 100%;
            display: block; 
            object-fit: cover;
            margin: 0;
            padding: 0; 
        }

        .grid-cell.ship {
            background-color: #663e43;
            color: white;
        }

        .grid-cell.highlight {
            background-color: lightgray;
        }

    .header-cell {
        background-color: #f0f0f0;
        font-weight: bold;
    }

    .menu-container {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
    }

        .menu-container h4 {
            margin-top: 0;
        }

    .scrollable-container {
        max-height: 500px;
        overflow-y: auto;
        border: 1px solid #ccc;
        padding: 10px;
        background-color: #E2A3AA;
    }
</style>

<div class="grid-container">
    <div>
        <h4>Grille du Joueur</h4>
        <table class="grid">
            <thead>
                <tr>
                    <th class="header-cell"></th>
                    @for (int j = 0; j < GameState.PlayerGrid.GetLength(1); j++)
                    {
                        <th class="header-cell"><b>@j</b></th>
                    }
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < GameState.PlayerGrid.GetLength(0); i++)
                {
                    <tr>
                        <td class="header-cell"><b>@(Convert.ToChar(65 + i))</b></td>
                        @for (int j = 0; j < GameState.PlayerGrid.GetLength(1); j++)
                        {
                            <td class="grid-cell">
                                @if (GameState.PlayerGrid[i, j] == '\0')
                                {
                                    <span>.</span>
                                }
                                else if (GameState.PlayerGrid[i, j] == 'X')
                                {
                                    <img src="images/hit.png" alt="Touché" class="grid-image" />
                                }
                                else if (GameState.PlayerGrid[i, j] == 'O')
                                {
                                    <img src="images/miss.jpeg" alt="Raté" class="grid-image" />
                                }
                                else
                                {
                                    <img src="@GameState.PlayerGridImages[i, j]" alt="Bateau" class="grid-image" />
                                }
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div>
        <h4>Grille de l'Adversaire</h4>
        <table class="grid">
            <thead>
                <tr>
                    <th class="header-cell"></th>
                    @for (int j = 0; j < GameState.OpponentGrid.GetLength(1); j++)
                    {
                        <th class="header-cell"><b>@j</b></th>
                    }
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < GameState.OpponentGrid.GetLength(0); i++)
                {
                    <tr>
                        <td class="header-cell"><b>@(Convert.ToChar(65 + i))</b></td>
                        @for (int j = 0; j < GameState.OpponentGrid.GetLength(1); j++)
                        {
                            int capturedI = i;
                            int capturedJ = j;

                            @if (GameState.OpponentGrid[i, j] == null)
                            {
                                <td @onclick="@(() => GameState.IsPlayerTurn ? MakeAttack(capturedI, capturedJ) : null)" style="cursor: pointer;" class="grid-cell">
                                    <span id="@i-@j">.</span>
                                </td>
                            }
                            else
                            {
                                <td class="grid-cell">
                                    @if (GameState.OpponentGrid[i, j] == true)
                                    {
                                        <img src="images/hit.png" alt="Touché" class="grid-image" />
                                    }
                                    else
                                    {
                                        <img src="images/miss.jpeg" alt="Raté" class="grid-image" />
                                    }
                                </td>
                            }
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div>

        <button @onclick="UndoLastMove">Annuler</button>
        <button @onclick="TestGrpcCommunication">Tester gRPC</button>
        <div class="scrollable-container">
            <ul>
                @foreach (var move in Enumerable.Reverse(GameState.Moves))
                {
                    <li>
                        @move.AttackerName a
                        @if (move.Touch == "coulé")
                        {
                            <strong style="color: red;">@move.Touch</strong>
                        }
                        else if (move.Touch == "touché")
                        {
                            <strong>@move.Touch</strong>
                        }
                        else
                        {
                            @move.Touch
                        }
                        sur (@move.LetterX, @move.Y)
                    </li>
                }
            </ul>
        </div>
    </div>

</div>

@code {
    private string gameStatus;
    private int GridSize = 10;
    protected override void OnInitialized()
    {
        GameState.OnChange += StateHasChanged; 
    }
    protected override async Task OnInitializedAsync()
    {
        var request = new AttackRequestGRPC { Col = 2, Row = 3 };

        var response = await client.AttackAsync(request);

        if (response.Hit)
        {
            gameStatus = "It's a hit!";
        }
        else
        {
            gameStatus = "Miss!";
        }

        if (response.GameOver)
        {
            gameStatus += $" Game over! Winner: {response.Winner}";
        }
         GridSize = GameState.PlayerGrid.GetLength(0);
        await LoadHistory();  
        
    }
    

    private async Task MakeAttack(int x, int y)
    {
        if (!GameState.IsPlayerTurn || GameState.GameId == null)
            return;

        var response = await Http.PostAsJsonAsync($"/attack/{GameState.GameId}?x={x}&y={y}", new { });
        if (!response.IsSuccessStatusCode)
            return;

        var result = await response.Content.ReadFromJsonAsync<AttackResponse>();
        GameState.UpdateOpponentGrid(x, y, result.PlayerHit);


        if (result.GameOver)
        {
            GameState.WinnerName = result.Winner;
            Navigation.NavigateTo("/end");
        }

        if (result.IAHit != '.')
        {
            GameState.IsPlayerTurn = false;
            GameState.UpdatePlayerGrid(result.IAX, result.IAY, result.IAHit);
            GameState.UpdatePlayerGridImage(result.IAX, result.IAY, result.IAHit == 'X' ? "images/hit.png" : "images/miss.jpeg");
            GameState.IsPlayerTurn = true;
        }

        await LoadHistory();
    }

    private async Task LoadHistory()
    {
        if (!string.IsNullOrEmpty(GameState.GameId))
        {
            try
            {
                var moves = await Http.GetFromJsonAsync<List<MoveDto>>($"/history/{GameState.GameId}");

                if (moves != null && moves.Any())
                {
                    foreach (var move in moves)
                    {
                        move.LetterX = Convert.ToChar(65 + move.X).ToString(); 
                    }

                    GameState.Moves = moves.ToList();

                }
                else
                {
                    Console.WriteLine("Aucun mouvement trouvé.");
                    GameState.Moves = new List<MoveDto>();  
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erreur lors du chargement de l'historique: {ex.Message}");
            }
        }
        else
        {
            Console.WriteLine("GameId est nul ou vide.");
        }
    }
    private async Task UndoLastMove()
    {
        if (GameState.Moves.Any())
        {
            var lastMove = GameState.Moves.Last();
            var x = lastMove.X;
            var y = lastMove.Y;
            var response = await Http.PostAsJsonAsync($"/undo/{GameState.GameId}", lastMove);
            if (response.IsSuccessStatusCode)
            {

                if (lastMove.AttackerName != "ia")
                {
                    GameState.UpdateOpponentGrid(x, y, null);
                }
                else
                {
                    GameState.UpdatePlayerGrid(x, y, lastMove.PreviousLetter);
                    GameState.UpdatePlayerGridImage(x,y, GameState.PlayerGridImagesOld[x, y]);

                }
                GameState.Moves.RemoveAt(GameState.Moves.Count - 1);

                StateHasChanged();
            }
            else
            {
                Console.WriteLine("Erreur lors de l'annulation du dernier mouvement.");
            }
        }
    }
        private async Task TestGrpcCommunication()
        {
            var request = new AttackRequestGRPC
            {
                Col = 1, 
                Row = 1
            };

            try
            {
                var response = await client.AttackAsync(request);

                if (response.Hit)
                {
                    Console.WriteLine("Touché !");
                }
                else
                {
                    Console.WriteLine("Raté.");
                }

                if (response.GameOver)
                {
                    Console.WriteLine($"Partie terminée ! Gagnant : {response.Winner}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erreur lors de l'appel gRPC : {ex.Message}");
            }
        }

    

    public class MoveDto
    {
        public string AttackerName { get; set; }  
        public string DefenderName { get; set; }
        public int X { get; set; }
        public int Y { get; set; }               
        public bool IsHit { get; set; }           
        public string Touch { get; set; }
        public string LetterX { get; set; }
        public char PreviousLetter { get; set; }  
        public string PreviousImage { get; set; }
    }



    public class AttackResponse
        {
            public bool PlayerHit { get; set; }
            public char IAHit { get; set; }
            public string IATouch  { get; set;}
            public int IAX { get; set; }
            public int IAY { get; set; }
            public bool GameOver { get; set; }
            public string Winner { get; set; }
            public int PlayerX { get; set; }
            public int PlayerY { get; set; }
            public string IaId { get; set; }
            public string PlayerId { get; set; }

        }
        
    }

@code {

}
